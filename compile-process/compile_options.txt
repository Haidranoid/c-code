- Compile manually ----------------------------------- [DYNAMIC LINKING]
terminal$ gcc main.c      -> a.out / a.exe

- Compile with custom output filename ---------------- [DYNAMIC LINKING]
terminal$ gcc -o main main.c

- Compile with custom output filename with warnings -- [DYNAMIC LINKING]
terminal$ gcc -Wall -o main main.c

- Compile file in steps ------------------------------ [NO LINKED]

1.- generate object file                               [STOP LINKER PROCESS]
terminal$ gcc -Wall -c main.c   ->  main.o

2.- link the libraries
terminal$ gcc -Wall -o main main.o -dy                 [DYNAMIC LINKING]
terminal$ gcc -Wall -o main main.o -static             [STATIC LINKING] (not working,try in c++)

- Compile file in steps ------------------------------ [STATIC LINKING]
terminal$ gcc -Wall -o main main.c -static                              (not working,try in c++)

- Displays the shared libraries needed ---------------
terminal$ ldd a.out
terminal$ otool -L a.out


- Generate static library ---------------------------- [STATIC LIBRARY]

terminal$ gcc -c libmain.c
terminal$ ar rcs libmain.a libmain.o ... ...

list the files obj.o in the library
terminal$ ar -t libtmain.a

- Generate shared library ---------------------------- [SHARED LIBRARY]

terminal$ gcc -c -Wall -fPIC util_file.c
terminal$ gcc -shared -o main.so main.o


- Link to external static/shared libraries -----------
link with <math.h>
terminal$ gcc -Wall main.c -o main -l m

link with <math.h>
terminal$ gcc main.c -l m

- Generate debugger information ----------------------
terminal$ gcc -g main.c

print debugger information
terminal$ gcc -v main.c

- Verify if in ansi standard -------------------------
terminal$ gcc -Wall -ansi main.c

- Define macro in compile time -----------------------
terminal$ gcc -DMY_MACRO=5 main.c



Use the following flags for linking
-static -static-libgcc -static-libstdc++

Check if it actually worked
Make sure that there is really no dynamic linkage

ldd yourexecutable
should return "not a dynamic executable" or something equivalent.

Make sure that there are no unresolved symbols left

nm yourexecutable
The list should be empty or should contain only some special kernel-space symbols like

U __tls_get_addr
Finally, check if you can actually execute your executable

