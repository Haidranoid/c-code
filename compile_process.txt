-------------------------------------------------------------

Compile and Link

$ gcc main.c	  -> a.out | a.exe

Compiling files

$ gcc -c main.c   -> main.o | main.obj

Linking files

$ gcc main.o      -> a.out | a.exe

Linking external libraries

$ gcc test.c -lm [<math.h>]
$ gcc test.o -lm [<math.h>]



Options

$ gcc -g main.c		   -> Generates debugging information
$ gcc -Wall main.c 	   -> Enables all warnings
$ gcc -D MACRO_NAME	   -> Defines a MACRO by a parameter
$ gcc -ansi main.c	   -> Enables c90 standard
$ gcc -E main.c	 	   -> Shows the preprocessor process
$ gcc -S main.c	 	   -> Generates main.s (assembly code)
$ gcc -v main.c		   -> Show steps of compilation
$ gcc -save-temps main.c   -> Saves all the files needed in the process of compilation
$ gcc main.c @opt_file	   -> Compiles with the parameters defined in the file (-Wall -ansi -g)
$ gcc -Q --help=optimizers -> Shows all the optimizations options
$ gcc -I <path>		   -> Includes the dir where the .h files are located

-------------------------------------------------------------

Tools

$ ulimit -c unlimited	-> Enables the generation of core dump files
$ ldd a.out		-> Displays a list of the shared libraries needed  (Linux, Windows)
$ otool -L a.out		-> Displays a list of the shared libraries needed  (MAC)
$ nm a.out		-> in second column ’T’ means that a function is defined 
			   in second column ’U’ means that a function is undefined and should be resolved by the linker

-------------------------------------------------------------

Debugging with gdb or lldb

$ gcc -g main.c
$ gdb a.out

(gdb) run 			-> runs the debug
(gdb) list <line> | <r1,r2>	-> displays the 10 lines after the line (optional)
(gdb) print <variable>   		-> prints the value of the variables 
(gdb) quit			-> exits of gdb
(Gdb) set var <var> = <value>	-> sets variable in runtime
(Gdb) break <line>		-> sets breakpoint in <line>
(Gdb) c | continue		-> continue to the next breakpoint
(Gdb) s | step <numer>		-> goes to the next step
(Gdb) n | next			-> goes to the next statement
(Gdb) info locals		-> prints all the local variables
(Gdb) info break			-> prints all the breakpoints
(Gdb) clear <line>		-> delete the breakpoint in <line>
(Gdb) help <command>		-> shows the commands available

-------------------------------------------------------------
Creating static libraries [.a]

default directory to find headers and libraries

Mac OS  	-> /usr/local/include /usr/local/lib
Windows 	-> 
Unix/Linux	-> /usr/include and /usr/lib 


$ mkdir my-lib
$ cd my-lib
$ mkdir headers sources
$ touch headers/mylib.h -->

	#ifndef MY_LIB_H
	#define MY_LIB_H

	void func(void);

	#endif // MY_LIB_H


$ touch sources/mylib.c -->

	#include <stdio.h>
	#include "../headers/mylib.h"

	void func(void){
  	  printf("func() called from static library");
	}

$ gcc   -c sources/mylib.c -o libmylib.o	-> Compiles the source file to lib[name].o 

$ ar rcs libmylib.a libmylib.o		-> Generate the static library from the object file
$ ar -cvq libmylib.a libmylib.o		-> EQUAL TO INSTRUCTION ABOVE			  
$ ar -t libmylib.a 			-> Displays the .o files in the library


Create a file to test the library including the header mylib.h

$ touch main.c

	#include <stdio.h>
	#include "mylib.h"
 
  	int main() {
  	    func();
  	    return 0;
  	}   



Including path for the .h libraries files

Move the mylib.h file to default include directory and libmylib.a to default library directory 

$ gcc -c main.c -o main.o
$ gcc main.o -l mylib

						OR

Include the header file by flag and search the library with full or relative path

$ gcc -I <path> -c main.c	 -o main.o	 -> Includes the <path> to the dir where the .h files are located
					    and compiles the main.c to main.o (object file)
$ gcc main.o <path>/libmylib.a		 -> Link the main.o and the library, this can be relative or full path
$ ./a.out





Creating dynamic libraries [.so .dll .dylib] 

$ mkdir my-lib
$ cd my-lib
$ mkdir headers sources
$ touch headers/mylib.h -->

	#ifndef MY_LIB_H
	#define MY_LIB_H

	void func(void);

	#endif // MY_LIB_H


$ touch sources/mylib.c -->

	#include <stdio.h>
	#include "../headers/mylib.h"

	void func(void){
  	  printf("func() called from static library");
	}

$ gcc -g -fPIC sources/mylib.c -shared -o libmylib.so	-> Compiles the source file to lib[name].so


Create a file to test the library including the header mylib.h

$ touch main.c

	#include <stdio.h>
	#include "mylib.h"
 
  	int main() {
  	    func();
  	    return 0;
  	}   


Including path for the .h libraries filesCreate a file to test the library including the header mylib.h


Move the mylib.h file to default include directory and libmylib.a to default library directory 

$ gcc -c main.c -o main.o
$ gcc main.o -l mylib

						OR


$ gcc -I <path> -c main.c	 -o main.o	 -> Includes the <path> to the dir where the .h files are located
					    and compiles the main.c to main.o (object file)

Windows [-l libmylib]
$ gcc main.o -L <path> -l lib<library>	 -> Add the <path> absolute or relative where is the libmylib.so and then link the <library>

##### YOU HAVE TO PLACE THE libmylib.so INTO A DEFAULT FOLDER, OR THIS WONT WORK, EVENT WITH THIS LINE
$ cd my-lib
$ export PATH=<path>:$PATH 



Unix-Linux [-l mylib]
$ gcc main.o -L <path> -l <library>	 	-> Add the <path> absolute or relative where is the libmylib.so and then link the <library>

##### YOU HAVE TO PLACE THE libmylib.so INTO A DEFAULT FOLDER, OR THIS WONT WORK, EVENT WITH THIS LINE
$ cd my-lib
$ export LD_LIBRARY_PATH=<path>:$LD_LIBRARY_PATH	-> Add the <path> available where the libmylib.so to LD_LIBRARY_PATH env



$ ldd a.out				 -> Displays the .so needed by the executable
$ ./a.out




Notes:
	The compiler expects to find the libraries in certain directories
	The compiler looks in a few special places such as /usr/lib/, /usr/local/lib for libraries

	/usr/local/lib -> system directory

	The compiler option -L<pathname> is used to tell the linker a list of other directories in which to search for libraries
	If you put your archive somewhere else, like /my-lib (own directory)

	/my-lib  -> my own directory

	The name that follows the -l option needs to match part of the archive name (.a files must be in /usr/local/lib)
	
	If your archive is called libawasome.a, you can compile your program with the -lawesome switch


https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/UsingDynamicLibraries.html#:~:text=The%20standard%20locations%20for%20dynamic,LD_LIBRARY_PATH

-------------------------------------------------------------
Interesting information

About PATH, CPATH, LIBRARY_PATH:
	
	PATH: For searching executables and run-time shared libraries (.dll .so .dylib)
	
	CPATH:  For searching the include-paths for headers (<math.h> <stdlib.h>)
			searched after paths specified in -l<dir> options
			C_INCLUDE_PATH can be used to specify C headers if the particular language was indicated in pre-processing
	
	LIBRARY_PATH: For searching libraries-paths for link libraries
				   it is searched after paths specified in -L<dir> options



About auto linking libraries: 

	The functions in stdlib.h and stdio.h have implementations in libc.so (or libc.a for static linking), which is linked into your executable by default (as if -lc were specified). GCC can be instructed to avoid this automatic link with the -nostdlib or -nodefaultlibs options.
The math functions in math.h have implementations in libm.so (or libm.a for static linking), and libm is not linked in by default. There are historical reasons for this libm/libc split, none of them very convincing.
Interestingly, the C++ runtime libstdc++ requires libm, so if you compile a C++ program with GCC (g++), you will automatically get libm linked in.



